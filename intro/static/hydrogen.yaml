ZapOSApiVersion: v1alpha1
kind: Workflow

resources:
- name: open-pack-core
  type: git
  parameters:
    url: "git@github.com:zapatacomputing/open-pack-core.git"
    branch: "master"
- name: open-pack-chem
  type: git
  parameters:
    url: "git@github.com:zapatacomputing/open-pack-chem.git"
    branch: "master"
- name: open-pack-vqe
  type: git
  parameters:
    url: "git@github.com:zapatacomputing/open-pack-vqe.git"
    branch: "master"
- name: open-pack-optimizers
  type: git
  parameters:
    url: "git@github.com:zapatacomputing/open-pack-optimizers.git"
    branch: "master"
- name: open-pack-forest
  type: git
  parameters:
    url: "git@github.com:zapatacomputing/open-pack-forest.git"
    branch: "master"

# Specify the prefix to use when generating names of workflow executions.
metadata:
  generateName: h2-example- 

# The actual workflow specification
spec:

  entrypoint: basis-set-loop

  arguments:
    parameters:
    - s3-bucket: quantum-engine 
    - s3-key: projects/examples/hydrogen/data
    - docker-image: 'open_pack_default'
    - docker-tag: 'test'

  templates:

  - name: basis-set-loop
    steps:
    - - name: bond-length-loop
        template: bond-length-loop
        arguments:
          parameters:
          - basis: '{{item}}' # Note that quotes are needed here because of the curly braces
        withItems:
        - STO-3G
        # - 6-31G
        # - 6-311G

  - name: bond-length-loop
    inputs:
      parameters:
      - name: basis
    steps:
    - - name: run-h2
        template: run-h2
        arguments:
          parameters:
          - basis: '{{inputs.parameters.basis}}'
          - bond-length: '{{item}}'
        withItems: [0.60, 0.70, 0.80]
  
  - name: run-h2
    inputs:
      parameters:
      - name: basis
      - name: bond-length
    steps:
    - - name: create-molecule
        template: create-diatomic-molecule
        arguments:
          parameters:
          - species1: H
          - species2: H
          - bond-length: '{{inputs.parameters.bond-length}}'
          - resources: [open-pack-core, open-pack-chem]
          - docker-image: "open_pack_psi4"
          - docker-tag: "test"

    - - name: run-hartree-fock
        template: run-psi4
        arguments:
          artifacts:
          - geometry:
              from: '{{steps.create-molecule.outputs.artifacts.geometry}}'
          parameters:
          - basis: '{{inputs.parameters.basis}}'
          - method: scf
          - reference: rhf
          - nthreads: "4"
          - save-hamiltonian: 'True' # Boolean values must be put in quotes!
          - resources: [open-pack-core, open-pack-chem]
          - docker-image: "open_pack_psi4"
          - docker-tag: "test"
      - name: run-coupled-cluster
        template: run-psi4
        arguments:
          artifacts:
          - geometry:
              from: '{{steps.create-molecule.outputs.artifacts.geometry}}'
          parameters:
          - basis: '{{inputs.parameters.basis}}'
          - method: ccsd(t)
          - reference: rhf
          - nthreads: "4"
          - save-hamiltonian: 'False'
          - resources: [open-pack-core, open-pack-chem]
          - docker-image: "open_pack_psi4"
          - docker-tag: "test"
    - - name: transform-hamiltonian
        template: transform-interaction-operator
        arguments:
          artifacts:
          - input-op:
              from: "{{steps.run-hartree-fock.outputs.artifacts.hamiltonian}}"
          parameters:
          - transformation: Jordan-Wigner
          - resources: [open-pack-core]
          - docker-image: "{{workflow.parameters.docker-image}}"
          - docker-tag: "{{workflow.parameters.docker-tag}}"
    - - name: build-vqe-circuit-template
        template: build-vqe-circuit-template
        arguments:
          parameters:
          - ansatz-type: singlet UCCSD
          - n-alpha: "{{steps.run-hartree-fock.outputs.parameters.n-alpha}}"
          - n-beta: "{{steps.run-hartree-fock.outputs.parameters.n-beta}}"
          - n-mo: "{{steps.run-hartree-fock.outputs.parameters.n-mo}}"
          - transformation: Jordan-Wigner
          - resources: [open-pack-core, open-pack-vqe]
          - docker-image: "{{workflow.parameters.docker-image}}"
          - docker-tag: "{{workflow.parameters.docker-tag}}"
    - - name: generate-random-ansatz-params
        template: generate-random-ansatz-params
        arguments:
          parameters:
          - min-val: "-0.01"
          - max-val: "0.01"
          - resources: [open-pack-core]
          - docker-image: "{{workflow.parameters.docker-image}}"
          - docker-tag: "{{workflow.parameters.docker-tag}}"
          artifacts:
          - ansatz:
              from: "{{steps.build-vqe-circuit-template.outputs.artifacts.ansatz}}"
    - - name: build-ansatz-circuit
        template: build-ansatz-circuit
        arguments:
          parameters:
          - resources: [open-pack-core, open-pack-vqe]
          - docker-image: "{{workflow.parameters.docker-image}}"
          - docker-tag: "{{workflow.parameters.docker-tag}}"
          artifacts:
          - ansatz:
              from: "{{steps.build-vqe-circuit-template.outputs.artifacts.ansatz}}"
          - params:
              from: "{{steps.generate-random-ansatz-params.outputs.artifacts.params}}"
      - name: optimize-variational-circuit
        template: optimize-variational-circuit
        arguments:
          parameters:
          - platform: forest
          - backend_specs: "{'module_name': 'orquestra.forest.simulator', 'function_name': 'ForestSimulator', 'device_name': 'wavefunction-simulator'}"
          # - optimizer_specs: "{'module_name': 'orquestra.optimizers.grid_search', 'function_name': 'GridSearchOptimizer'}"
          - optimizer_specs: "{'module_name': 'orquestra.optimizers.scipy_optimizer', 'function_name': 'ScipyOptimizer', 'method': 'L-BFGS-B'}"
          - resources: [open-pack-core, open-pack-optimizers, open-pack-forest, open-pack-vqe]
          - docker-image: "{{workflow.parameters.docker-image}}"
          - docker-tag: "{{workflow.parameters.docker-tag}}"
          - memory: 2048Mi
          artifacts:
          - ansatz:
              from: "{{steps.build-vqe-circuit-template.outputs.artifacts.ansatz}}"
          - qubit-operator:
              from: "{{steps.transform-hamiltonian.outputs.artifacts.transformed-op}}"
          - initial-parameters:
              from: "{{steps.generate-random-ansatz-params.outputs.artifacts.params}}" 
